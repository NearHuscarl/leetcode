{
  "id": "contains-duplicate-ii",
  "neetcode": "https://www.youtube.com/watch?v=ypn0aZ0nrL4",
  "testCases": [
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        4
      ],
      "k": 4
    },
    {
      "nums": [
        1,
        2,
        3,
        4,
        5,
        1,
        2,
        3
      ],
      "k": 2
    }
  ],
  "metaData": {
    "name": "containsNearbyDuplicate",
    "params": [
      {
        "name": "nums",
        "type": "number[]"
      },
      {
        "name": "k",
        "type": "number"
      }
    ],
    "return": {
      "type": "boolean"
    }
  },
  "solutions": {
    "slidingWindow": {
      "id": "slidingWindow",
      "name": "Sliding Window",
      "programCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {boolean}\r\n */\r\nvar containsNearbyDuplicate = function (nums, k) {\r\n  const window = new Set();\r\n  let left = 0;\r\n  let right;\r\n\r\n  for (right = 0; right < nums.length; right++) {\r\n    if (right - left > k) {\r\n      window.delete(nums[left]);\r\n      left++;\r\n    }\r\n    if (window.has(nums[right])) {\r\n      return true;\r\n    }\r\n    window.add(nums[right]);\r\n  }\r\n\r\n  return false;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VSet, VC } from 'visualizer';\r\nimport { red, green, amber, lightGreen, teal } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, treeNodes } = useVisualizerData();\r\n  const { left, right, nums, window } = data;\r\n  const checkKeyExpr = expression === 'window.has(nums[right])';\r\n  const checkLenExpr = expression === 'right - left > k';\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        x={VC.Array.ItemSize + 30}\r\n        value={nums}\r\n        highlightRange={[\r\n          left,\r\n          right,\r\n          checkLenExpr && test ? red[500] : amber[500],\r\n        ]}\r\n        getElementStyle={(e, i, style) => {\r\n          if (checkKeyExpr && i === right) {\r\n            style.background = test ? lightGreen[500] : red[500];\r\n            style.color = '#ffffff';\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n      <VSet\r\n        value={window}\r\n        getElementStyle={(e, style) => {\r\n          if (checkKeyExpr) {\r\n            if (test) {\r\n              if (e == nums[right]) {\r\n                style.background = lightGreen[500];\r\n                style.color = '#ffffff';\r\n              }\r\n            } else {\r\n              style.background = red[500];\r\n              style.color = '#ffffff';\r\n            }\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 42.6,
  "difficulty": "Easy",
  "title": "Contains Duplicate II",
  "titleSlug": "contains-duplicate-ii",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Sliding Window",
      "slug": "sliding-window"
    }
  ]
}