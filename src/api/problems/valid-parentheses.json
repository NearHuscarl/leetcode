{
  "id": "valid-parentheses",
  "neetcode": "https://www.youtube.com/watch?v=WTzjTskDFMg",
  "testCases": [
    {
      "s": "{[()]}"
    },
    {
      "s": "()[]{}"
    },
    {
      "s": "([)]"
    }
  ],
  "metaData": {
    "name": "isValid",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  },
  "solutions": {
    "stack": {
      "id": "stack",
      "name": "Stack",
      "programCode": "/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isValid = function (s) {\r\n  const stack = [];\r\n  const openParenLookup = {\r\n    ')': '(',\r\n    '}': '{',\r\n    ']': '[',\r\n  };\r\n\r\n  for (let i = 0; i < s.length; i++) {\r\n    const chr = s[i];\r\n    if (openParenLookup[chr]) {\r\n      if (stack.at(-1) === openParenLookup[chr]) {\r\n        stack.pop();\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      stack.push(chr);\r\n    }\r\n  }\r\n\r\n  return stack.length === 0;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, useTestCase, VArray, VStack } from 'visualizer';\r\nimport { red, lightGreen, teal, amber, blue } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { s: sParam } = useTestCase();\r\n  const { s = '', i, stack } = data;\r\n  const openParenSet = new Set(['(', '{', '[']);\r\n  const matchParenExpr = expression === 'stack.at(-1) === openParenLookup[chr]';\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        value={s}\r\n        pointers={[{ name: 'i', value: i, color: blue[800] }]}\r\n        getElementStyle={(value, i2, style) => {\r\n          style.background = openParenSet.has(value)\r\n            ? lightGreen[100]\r\n            : red[100];\r\n\r\n          if (matchParenExpr && i === i2) {\r\n            style.background = test ? lightGreen[500] : red[500];\r\n            style.color = '#ffffff';\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n      <VStack\r\n        y={80}\r\n        value={stack}\r\n        length={sParam.length}\r\n        getElementStyle={(_, i2, style) => {\r\n          if (matchParenExpr && i2 === stack.length - 1) {\r\n            style.background = test ? lightGreen[500] : red[500];\r\n            style.color = '#ffffff';\r\n          }\r\n\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 40.3,
  "difficulty": "Easy",
  "title": "Valid Parentheses",
  "titleSlug": "valid-parentheses",
  "likes": 18390,
  "dislikes": 1046,
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Stack",
      "slug": "stack"
    }
  ]
}