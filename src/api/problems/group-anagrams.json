{
  "id": "group-anagrams",
  "neetcode": "https://www.youtube.com/watch?v=vzdNOK2oB2E",
  "testCases": [
    {
      "strs": [
        "eat",
        "tea",
        "tan",
        "ate",
        "nat",
        "bat"
      ]
    }
  ],
  "metaData": {
    "name": "groupAnagrams",
    "params": [
      {
        "name": "strs",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "string[][]"
    }
  },
  "solutions": {
    "lookupTable": {
      "id": "lookupTable",
      "name": "Lookup Table",
      "programCode": "/**\r\n * @param {string[]} strs\r\n * @return {string[][]}\r\n */\r\nvar groupAnagrams = function (strs) {\r\n  const group = {};\r\n  for (let i = 0; i < strs.length; i++) {\r\n    const word = strs[i];\r\n    const key = _getFreqKey(word);\r\n\r\n    if (!group[key]) {\r\n      group[key] = [];\r\n    }\r\n    group[key].push(word);\r\n  }\r\n\r\n  return Object.values(group);\r\n};\r\n\r\n/**\r\n * @param {string} str\r\n * @return {string}\r\n */\r\nfunction _getFreqKey(str) {\r\n  const freqArr = new Array(26).fill(0);\r\n\r\n  for (let i = 0; i < str.length; i++) {\r\n    const chr = str[i];\r\n    const chrCode = chr.codePointAt(0) - 97;\r\n    if (!freqArr[chrCode]) {\r\n      freqArr[chrCode] = 0;\r\n    }\r\n    freqArr[chrCode]++;\r\n  }\r\n  return freqArr.join(',');\r\n}\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VLookupTable, VC } from 'visualizer';\r\nimport { red, yellow, amber, purple, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, callStack } = useVisualizerData();\r\n  const { group, strs, i } = data;\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        value={strs}\r\n        pointers={[{ name: 'i', value: i, color: red[500] }]}\r\n      />\r\n      <VLookupTable\r\n        y={VC.Array.ItemSize + 50}\r\n        value={group}\r\n        header={['Freq', 'Anagrams']}\r\n        keyWidth={350}\r\n        valueWidth={300}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 66.8,
  "difficulty": "Medium",
  "title": "Group Anagrams",
  "titleSlug": "group-anagrams",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    }
  ]
}