{
  "id": "reverse-list",
  "neetcode": "https://www.youtube.com/watch?v=G0_I-ZF0S38",
  "testCases": [
    {
      "head": [
        1,
        2,
        3,
        4,
        5
      ]
    },
    {
      "head": [
        1,
        2
      ]
    },
    {
      "head": []
    }
  ],
  "metaData": {
    "name": "reverseList",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "ListNode"
    }
  },
  "solutions": {
    "reverse-list": {
      "id": "reverse-list",
      "name": "Reverse List",
      "programCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val, next) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.next = (next===undefined ? null : next)\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nfunction reverseList(head) {\r\n  if (!head) {\r\n    return null;\r\n  }\r\n\r\n  let left = null;\r\n  let cur = head;\r\n\r\n  while (cur) {\r\n    let right = cur.next;\r\n    cur.next = left;\r\n    left = cur;\r\n    cur = right;\r\n  }\r\n\r\n  return left;\r\n}\r\n",
      "visualizerCode": "import React from \"react\";\r\nimport { useVisualizerData, VLinkedList } from \"visualizer\";\r\nimport { red, purple, amber, lightGreen, teal, alpha, blue } from \"colors\";\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, listNodes } = useVisualizerData();\r\n  const { head, left, cur, right } = data;\r\n\r\n  return (\r\n    <VLinkedList\r\n      nodes={listNodes}\r\n      pointers={[\r\n        { name: \"head\", value: head, color: teal[\"500\"], isHead: true },\r\n        { name: \"left\", value: left, color: red[\"500\"] },\r\n        { name: \"cur\", value: cur, color: amber[600], highlight: true },\r\n        { name: \"right\", value: right, color: purple[600] },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  }
}