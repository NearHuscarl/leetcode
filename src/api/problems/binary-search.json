{
  "id": "binary-search",
  "neetcode": "https://www.youtube.com/watch?v=s4DPM8ct1pI",
  "testCases": [
    {
      "nums": [
        1,
        3,
        5,
        7,
        11,
        13,
        17,
        19,
        23,
        29,
        31,
        37,
        41,
        43,
        47,
        53,
        59
      ],
      "target": 37
    },
    {
      "nums": [
        1,
        3,
        5,
        7,
        17,
        19,
        23,
        29,
        31,
        41,
        43,
        47,
        53,
        59
      ],
      "target": 37
    }
  ],
  "metaData": {
    "name": "search",
    "params": [
      {
        "name": "nums",
        "type": "number[]"
      },
      {
        "name": "target",
        "type": "number"
      }
    ],
    "return": {
      "type": "number"
    }
  },
  "solutions": {
    "binary-search": {
      "id": "binary-search",
      "name": "Binary Search",
      "programCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar search = function (nums, target) {\r\n  let left = 0;\r\n  let right = nums.length - 1;\r\n\r\n  while (left <= right) {\r\n    const mid = Math.floor((right - left) / 2 + left);\r\n\r\n    if (nums[mid] === target) {\r\n      return mid;\r\n    } else if (nums[mid] > target) {\r\n      right = mid - 1;\r\n    } else if (nums[mid] < target) {\r\n      left = mid + 1;\r\n    }\r\n  }\r\n\r\n  return -1;\r\n};\r\n",
      "visualizerCode": "import React, { CSSProperties } from 'react';\r\nimport { useVisualizerData, VArray } from 'visualizer';\r\nimport { red, purple, lightGreen, amber } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { nums = [], left, right, mid, target } = data;\r\n\r\n  return (\r\n    <VArray\r\n      y={50}\r\n      value={nums}\r\n      getElementStyle={(value, index, style) => {\r\n        if (value === target) {\r\n          style.borderColor = lightGreen[500];\r\n        }\r\n\r\n        const test = type === 'testExpressionSuccess';\r\n\r\n        if (index < left || index > right) {\r\n          style.color = '#00000044';\r\n        }\r\n        if (expression === 'nums[mid] === target' && index === mid) {\r\n          style.background = test ? lightGreen[500] : red[500];\r\n        }\r\n        if (expression === 'nums[mid] > target' && index < mid) {\r\n          style.background = test ? lightGreen[100] : red[100];\r\n        }\r\n        if (expression === 'nums[mid] < target' && index > mid) {\r\n          style.background = test ? lightGreen[100] : red[100];\r\n        }\r\n        return style;\r\n      }}\r\n      pointers={[\r\n        { name: 'left', value: left, color: purple['500'] },\r\n        { name: 'right', value: right, color: red['500'] },\r\n        { name: 'mid', value: mid, color: amber[600] },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n",
      "timeComplexity": "log(n)"
    }
  },
  "acRate": 56.1,
  "difficulty": "Easy",
  "title": "Binary Search",
  "titleSlug": "binary-search",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "slug": "binary-search"
    }
  ]
}