{
  "id": "invert-binary-tree",
  "neetcode": "https://www.youtube.com/watch?v=OnSn2XEQ4MY",
  "testCases": [
    {
      "root": [
        4,
        2,
        7,
        1,
        3,
        6,
        9
      ]
    },
    {
      "root": [
        1,
        2
      ]
    },
    {
      "root": [
        2,
        1,
        3
      ]
    },
    {
      "root": []
    }
  ],
  "metaData": {
    "name": "invertTree",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "TreeNode"
    }
  },
  "solutions": {
    "main": {
      "id": "main",
      "name": "Main",
      "programCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode}\r\n */\r\nvar invertTree = function (root) {\r\n  const invert = (node = root) => {\r\n    if (!node || (!node.left && !node.right)) {\r\n      return node;\r\n    }\r\n\r\n    [node.left, node.right] = [node.right, node.left];\r\n\r\n    invert(node.left);\r\n    invert(node.right);\r\n\r\n    return node;\r\n  };\r\n\r\n  return invert();\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VTree } from 'visualizer';\r\nimport { red, green, amber, lightGreen, teal, transform } from 'colors';\r\n\r\nconst interpolate = transform(\r\n  [0, 0.5, 1],\r\n  [red[500], amber[500], lightGreen[500]]\r\n);\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, treeNodes } = useVisualizerData();\r\n  const { root, node } = data;\r\n  let minX = Number.MAX_SAFE_INTEGER;\r\n  let maxX = Number.MIN_SAFE_INTEGER;\r\n  const colorLookupRef = React.useRef({});\r\n  const nodesRef = React.useRef(0);\r\n\r\n  const nodeCount = Object.keys(treeNodes).length;\r\n  if (nodeCount !== nodesRef.current) {\r\n    nodesRef.current = nodeCount;\r\n    colorLookupRef.current = {};\r\n  }\r\n\r\n  return (\r\n    <VTree\r\n      nodes={treeNodes}\r\n      getNode={(n) => {\r\n        if (n.tx < minX) minX = n.tx;\r\n        if (n.tx > maxX) maxX = n.tx;\r\n        return n;\r\n      }}\r\n      onDataComputed={(data) => {\r\n        const dx = maxX - minX;\r\n        data.treeNodes.forEach((n) => {\r\n          const color = interpolate((n.tx - minX) / (dx || 1));\r\n          if (!colorLookupRef.current[n.id]) {\r\n            colorLookupRef.current[n.id] = color;\r\n          }\r\n          n.color = colorLookupRef.current[n.id];\r\n        });\r\n      }}\r\n      pointers={[\r\n        {\r\n          name: 'root',\r\n          value: root,\r\n          color: teal['500'],\r\n        },\r\n        {\r\n          name: 'node',\r\n          value: node,\r\n          color: amber[500],\r\n          highlightBorder: true,\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 74.5,
  "difficulty": "Easy",
  "title": "Invert Binary Tree",
  "titleSlug": "invert-binary-tree",
  "topicTags": [
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Breadth-First Search",
      "slug": "breadth-first-search"
    },
    {
      "name": "Binary Tree",
      "slug": "binary-tree"
    }
  ]
}