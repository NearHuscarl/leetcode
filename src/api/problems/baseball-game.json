{
  "id": "baseball-game",
  "neetcode": "https://www.youtube.com/watch?v=Id_tqGdsZQI",
  "testCases": [
    {
      "operations": [
        "5",
        "-2",
        "4",
        "C",
        "D",
        "9",
        "+",
        "+"
      ]
    },
    {
      "operations": [
        "5",
        "2",
        "C",
        "D",
        "+"
      ]
    },
    {
      "operations": [
        "1",
        "C"
      ]
    }
  ],
  "metaData": {
    "name": "calPoints",
    "params": [
      {
        "name": "operations",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "number"
    }
  },
  "solutions": {
    "stack": {
      "id": "stack",
      "name": "Stack",
      "programCode": "/**\r\n * @param {string[]} operations\r\n * @return {number}\r\n */\r\nvar calPoints = function (operations) {\r\n  const stack = [];\r\n\r\n  for (let i = 0; i < operations.length; i++) {\r\n    const op = operations[i];\r\n\r\n    if (op === '+') {\r\n      stack.push(stack.at(-1) + stack.at(-2));\r\n    } else if (op === 'D') {\r\n      stack.push(stack.at(-1) * 2);\r\n    } else if (op === 'C') {\r\n      stack.pop();\r\n    } else {\r\n      stack.push(parseInt(op, 10));\r\n    }\r\n  }\r\n\r\n  return stack.reduce((a, c) => a + c, 0);\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VStack } from 'visualizer';\r\nimport { red, green, amber, lightGreen, blue } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { operations = [], i, stack = [] } = data;\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        value={operations}\r\n        pointers={[{ name: 'i', value: i, color: amber[700] }]}\r\n      />\r\n      <VStack\r\n        y={80}\r\n        value={stack}\r\n        length={operations.length}\r\n        getElementStyle={(value, i, style) => {\r\n          const test = type === 'testExpressionSuccess';\r\n          if (expression === \"op === '+'\" && test) {\r\n            if (i === stack.length - 2 || i === stack.length - 1) {\r\n              style.background =\r\n                i % 2 === 0 ? lightGreen[300] : lightGreen[500];\r\n              style.color = '#ffffff';\r\n            }\r\n          } else if (expression === \"op === 'D'\" && test) {\r\n            if (i === stack.length - 1) {\r\n              style.background = blue[300];\r\n              style.color = '#ffffff';\r\n            }\r\n          } else if (expression === \"op === 'C'\" && test) {\r\n            if (i === stack.length - 1) {\r\n              style.background = red[500];\r\n              style.color = '#ffffff';\r\n            }\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 74.1,
  "difficulty": "Easy",
  "title": "Baseball Game",
  "titleSlug": "baseball-game",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Simulation",
      "slug": "simulation"
    }
  ]
}