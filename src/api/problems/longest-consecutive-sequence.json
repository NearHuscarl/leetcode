{
  "id": "longest-consecutive-sequence",
  "neetcode": "https://www.youtube.com/watch?v=P6RZZMu_maU",
  "testCases": [
    {
      "nums": [
        100,
        4,
        200,
        1,
        3,
        2
      ]
    },
    {
      "nums": [
        0,
        3,
        7,
        2,
        5,
        8,
        4,
        6,
        0,
        1
      ]
    }
  ],
  "metaData": {
    "name": "longestConsecutive",
    "params": [
      {
        "name": "nums",
        "type": "number[]"
      }
    ],
    "return": {
      "type": "number"
    }
  },
  "solutions": {
    "set": {
      "id": "set",
      "name": "Set",
      "programCode": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar longestConsecutive = function (nums) {\r\n  const set = new Set(nums);\r\n  let max = 0;\r\n\r\n  for (let i = 0; i < nums.length; i++) {\r\n    const n = nums[i];\r\n    const isStartOfSeq = !set.has(n - 1);\r\n\r\n    if (isStartOfSeq) {\r\n      let seqLength = 1;\r\n      let seqItem = n;\r\n\r\n      while (set.has(seqItem + 1)) {\r\n        seqLength++;\r\n        seqItem++;\r\n      }\r\n      max = Math.max(seqLength, max);\r\n    }\r\n  }\r\n\r\n  return max;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VField, VC } from 'visualizer';\r\nimport { red, yellow, blue, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { nums = [], i, n, seqItem, max } = data;\r\n  const sortedNums = nums.slice().sort((a, b) => a - b);\r\n  const sortedNumsWithSpace = [];\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  for (let i = 0; i < sortedNums.length; i++) {\r\n    sortedNumsWithSpace.push(sortedNums[i]);\r\n    if (sortedNums[i] !== sortedNums[i + 1] - 1) {\r\n      sortedNumsWithSpace.push('');\r\n    }\r\n  }\r\n  if (sortedNumsWithSpace.length > 0) {\r\n    sortedNumsWithSpace.unshift('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        x={VC.Array.ItemSize}\r\n        y={VC.Array.ItemSize}\r\n        label=\"array\"\r\n        value={nums}\r\n        pointers={[{ name: 'i', value: i, color: red[500] }]}\r\n      />\r\n      <VArray\r\n        label=\"set\"\r\n        y={VC.Array.ItemSize * 2 + 60}\r\n        value={sortedNumsWithSpace}\r\n        color={blue[100]}\r\n        pointers={[\r\n          {\r\n            name: 'i',\r\n            value: sortedNumsWithSpace.indexOf(seqItem),\r\n            color: red[500],\r\n          },\r\n        ]}\r\n        getElementStyle={(value, index, style) => {\r\n          const isStartElements =\r\n            sortedNumsWithSpace[index] === n ||\r\n            sortedNumsWithSpace[index + 1] === n;\r\n\r\n          if (isStartElements && expression === 'isStartOfSeq') {\r\n            style.background = test ? lightGreen[500] : red[500];\r\n            style.color = '#ffffff';\r\n          }\r\n          if (value !== '') {\r\n            style.borderColor = blue[500];\r\n          } else {\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n      <VField\r\n        x={VC.Array.ItemSize}\r\n        y={VC.Array.ItemSize + 180}\r\n        label=\"max\"\r\n        value={max}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 48.5,
  "difficulty": "Medium",
  "title": "Longest Consecutive Sequence",
  "titleSlug": "longest-consecutive-sequence",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "Union Find",
      "slug": "union-find"
    }
  ]
}