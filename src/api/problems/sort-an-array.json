{
  "id": "sort-an-array",
  "testCases": [
    {
      "nums": [
        6,
        2,
        4,
        1,
        3
      ]
    },
    {
      "nums": [
        5,
        1,
        1,
        2,
        0,
        0
      ]
    },
    {
      "nums": [
        20,
        2,
        9,
        7,
        12,
        15,
        1,
        6,
        8
      ]
    }
  ],
  "metaData": {
    "name": "sortArray",
    "params": [
      {
        "name": "nums",
        "type": "number[]"
      }
    ],
    "return": {
      "type": "number[]"
    }
  },
  "solutions": {
    "quick-sort": {
      "id": "quick-sort",
      "name": "Quick Sort",
      "programCode": "/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar sortArray = function (nums) {\r\n  return quickSort(nums, 0, nums.length - 1);\r\n};\r\n\r\n/**\r\n * @param {number[]} nums\r\n * @param {number} start\r\n * @param {number} end\r\n */\r\nfunction quickSort(nums, start, end) {\r\n  if (end - start + 1 <= 1) {\r\n    return nums;\r\n  }\r\n\r\n  const pivot = nums[end];\r\n  let left = start;\r\n\r\n  // Partition: elements smaller than the pivot on left side\r\n  for (let i = start; i <= end; i++) {\r\n    if (nums[i] < pivot) {\r\n      _swap(nums, left, i);\r\n      left++;\r\n    }\r\n  }\r\n\r\n  // Move pivot in-between left & right sides\r\n  nums[end] = nums[left];\r\n  nums[left] = pivot;\r\n\r\n  quickSort(nums, start, left - 1);\r\n  quickSort(nums, left + 1, end);\r\n\r\n  return nums;\r\n}\r\n\r\n/**\r\n * @param {number[]} nums\r\n * @param {number} i\r\n * @param {number} j\r\n */\r\nfunction _swap(nums, i, j) {\r\n  const tmp = nums[i];\r\n  nums[i] = nums[j];\r\n  nums[j] = tmp;\r\n}\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VRecursiveTree } from 'visualizer';\r\nimport { red, lightGreen, teal, amber, blue, grey } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { nums = [], pivot, start, end, left, i } = data;\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        value={nums}\r\n        pointers={[\r\n          { name: 'left', value: left, color: red[500] },\r\n          { name: 'i', value: i, color: blue[500] },\r\n        ]}\r\n        color={teal[50]}\r\n        highlightRange={[start, end, teal[300]]}\r\n        getElementStyle={(value, index, style) => {\r\n          style.color = '#ffffff';\r\n          if (value === pivot?.val) {\r\n            style.background = amber[500];\r\n          }\r\n\r\n          const computed = left === start + Math.floor((end - start) / 2);\r\n          const inRange = start <= index && index <= end;\r\n          const visited = computed ? true : index <= i;\r\n          if (value < pivot) {\r\n            style.background = inRange && visited ? lightGreen[500] : lightGreen[200];\r\n            style.borderColor = inRange && visited ? lightGreen[500] : lightGreen[200];\r\n          } if (value > pivot) {\r\n            style.background = inRange && visited ? red[500] : red[200];\r\n            style.borderColor = inRange && visited ? red[500] : red[200];\r\n          }\r\n\r\n          if (\r\n            expression === 'nums[i] < pivot' &&\r\n            (index === i || value === pivot)\r\n          ) {\r\n            style.background = test ? lightGreen[800] : red[800];\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n      <VRecursiveTree<number[]>\r\n        trackedFn=\"quickSort\"\r\n        separationFactor={4.2}\r\n        renderNode={(n) => {\r\n          const { start, end, nums = [] } = n.recursiveData?.data ?? {};\r\n          const pivot = nums[end];\r\n\r\n          return (\r\n            <VArray\r\n              value={n.val}\r\n              color={teal[50]}\r\n              label={n.label}\r\n              center\r\n              highlightRange={[start, end, teal[300]]}\r\n              getElementStyle={(e, i, style) => {\r\n                if (pivot?.val === e) {\r\n                  style.background = amber[500];\r\n                  style.color = '#ffffff';\r\n                }\r\n                if (start > i || i > end) {\r\n                  style.color = grey[300];\r\n                }\r\n                return style;\r\n              }}\r\n            />\r\n          )\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n * log(n)"
    }
  },
  "acRate": 59.5,
  "difficulty": "Medium",
  "title": "Sort an Array",
  "titleSlug": "sort-an-array",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Divide and Conquer",
      "slug": "divide-and-conquer"
    },
    {
      "name": "Sorting",
      "slug": "sorting"
    },
    {
      "name": "Heap (Priority Queue)",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Merge Sort",
      "slug": "merge-sort"
    },
    {
      "name": "Bucket Sort",
      "slug": "bucket-sort"
    },
    {
      "name": "Radix Sort",
      "slug": "radix-sort"
    },
    {
      "name": "Counting Sort",
      "slug": "counting-sort"
    }
  ]
}