{
  "id": "sort-an-array",
  "title": "Sort an Array",
  "testCases": [
    {
      "nums": [
        6,
        2,
        4,
        1,
        3
      ]
    },
    {
      "nums": [
        5,
        1,
        1,
        2,
        0,
        0
      ]
    },
    {
      "nums": [
        20,
        2,
        9,
        7,
        12,
        15,
        1,
        6,
        8
      ]
    }
  ],
  "metaData": {
    "name": "sortArray",
    "params": [
      {
        "name": "nums",
        "type": "number[]"
      }
    ],
    "return": {
      "type": "number[]"
    }
  },
  "solutions": {
    "quick-sort": {
      "id": "quick-sort",
      "name": "Quick Sort",
      "programCode": "/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar sortArray = function (nums) {\r\n  return quickSort(nums, 0, nums.length - 1);\r\n};\r\n\r\n/**\r\n * @param {number[]} nums\r\n * @param {number} start\r\n * @param {number} end\r\n */\r\nfunction quickSort(nums, start, end) {\r\n  if (end - start + 1 <= 1) {\r\n    return nums;\r\n  }\r\n\r\n  const pivot = nums[end];\r\n  let left = start;\r\n\r\n  // Partition: elements smaller than the pivot on left side\r\n  for (let i = start; i <= end; i++) {\r\n    if (nums[i] < pivot) {\r\n      _swap(nums, left, i);\r\n      left++;\r\n    }\r\n  }\r\n\r\n  // Move pivot in-between left & right sides\r\n  nums[end] = nums[left];\r\n  nums[left] = pivot;\r\n\r\n  quickSort(nums, start, left - 1);\r\n  quickSort(nums, left + 1, end);\r\n\r\n  return nums;\r\n}\r\n\r\n/**\r\n * @param {number[]} nums\r\n * @param {number} i\r\n * @param {number} j\r\n */\r\nfunction _swap(nums, i, j) {\r\n  const tmp = nums[i];\r\n  nums[i] = nums[j];\r\n  nums[j] = tmp;\r\n}\r\n",
      "visualizerCode": "import React from \"react\";\r\nimport { useVisualizerData, VArray, VTree, useRecursiveTree } from \"visualizer\";\r\nimport { red, lightGreen, teal, amber, blue } from \"colors\";\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { nums = [], pivot, start, end, left, i } = data;\r\n  const treeData = useRecursiveTree({\r\n    trackedFn: \"quickSort\",\r\n    onVisitNode: (node) => {\r\n      if (node.children?.length === 2) {\r\n        const data = node.children[0].attributes.data;\r\n        node.children.splice(1, 0, {\r\n          name: \"pivot\",\r\n          attributes: { pivot: data.nums?.[data.end + 1] } as any,\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        array={nums}\r\n        highlightRange={[start, end, teal[300]]}\r\n        getElementStyles={(value, index, style) => {\r\n          if (value === pivot) {\r\n            style.background = lightGreen[200];\r\n            style.fontWeight = \"bold\";\r\n          }\r\n\r\n          const test = type === \"testExpressionSuccess\";\r\n          if (\r\n            expression === \"nums[i] < pivot\" &&\r\n            (index === i || value === pivot)\r\n          ) {\r\n            style.background = test ? lightGreen[500] : red[500];\r\n            style.color = test ? \"white\" : \"black\";\r\n          }\r\n          return style;\r\n        }}\r\n        pointers={[\r\n          { name: \"left\", value: left, color: red[500] },\r\n          { name: \"i\", value: i, color: blue[500] },\r\n        ]}\r\n      />\r\n      <VTree\r\n        data={treeData}\r\n        arrowOffset={45}\r\n        getNodeContent={(node) => {\r\n          if (node.name === \"pivot\") {\r\n            return [(node.attributes as any).pivot];\r\n          }\r\n          const { data } = node.attributes;\r\n          return (data.nums ?? []).slice(data.start, data.end + 1);\r\n        }}\r\n        getNodeStyles={(node) => {\r\n          if (node.name === \"pivot\") {\r\n            return {\r\n              arrayStyle: { stroke: red[300] },\r\n            };\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n * log(n)"
    }
  }
}