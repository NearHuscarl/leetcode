{
  "id": "valid-palindrome",
  "neetcode": "https://www.youtube.com/watch?v=jJXJ16kPFWg",
  "testCases": [
    {
      "s": "A man, a plan, a canal: Panama"
    },
    {
      "s": "race a car"
    },
    {
      "s": " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    }
  ],
  "metaData": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "boolean"
    }
  },
  "solutions": {
    "twoPointers": {
      "id": "twoPointers",
      "name": "Two Pointers",
      "programCode": "/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function (s) {\r\n  const validStr = s.toLowerCase().replace(/[^a-z0-9]/g, '');\r\n  let left = 0;\r\n  let right = validStr.length - 1;\r\n\r\n  while (left < right) {\r\n    if (validStr[left] !== validStr[right]) {\r\n      return false;\r\n    }\r\n    left++;\r\n    right--;\r\n  }\r\n\r\n  return true;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray } from 'visualizer';\r\nimport { red, yellow, blue, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { s, validStr, left, right } = data;\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        y={100}\r\n        value={(validStr ?? s) as string}\r\n        pointers={[\r\n          { name: 'left', value: left, color: red[500] },\r\n          { name: 'right', value: right, color: blue[500] },\r\n        ]}\r\n        getElementStyle={(e, i, style) => {\r\n          const checkExpression =\r\n            expression === 'validStr[left] !== validStr[right]';\r\n\r\n          const isAlphaNumeric = /^[a-z0-9]+$/i.test(e);\r\n          style.background = isAlphaNumeric ? yellow[100] : red[100];\r\n\r\n          if (checkExpression && (i === left || i === right)) {\r\n            style.background = !test ? lightGreen[500] : red[500];\r\n            style.color = '#ffffff';\r\n          }\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    },
    "reverse": {
      "id": "reverse",
      "name": "Reverse",
      "programCode": "/**\r\n * @param {string} s\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function (s) {\r\n  const arr1 = s\r\n    .toLowerCase()\r\n    .replace(/[^a-z0-9]/g, '')\r\n    .split('');\r\n  const arr2 = arr1.slice();\r\n\r\n  arr2.reverse();\r\n\r\n  for (let i = 0; i < arr1.length; i++) {\r\n    if (arr1[i] !== arr2[i]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray } from 'visualizer';\r\nimport { red, yellow, blue, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n\r\n  return null;\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 44.2,
  "difficulty": "Easy",
  "title": "Valid Palindrome",
  "titleSlug": "valid-palindrome",
  "topicTags": [
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "String",
      "slug": "string"
    }
  ]
}