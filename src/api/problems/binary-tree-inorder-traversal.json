{
  "id": "binary-tree-inorder-traversal",
  "neetcode": "https://www.youtube.com/watch?v=g_S5WuasWUE",
  "testCases": [
    {
      "root": [
        1,
        null,
        2,
        3,
        null,
        4,
        null,
        null,
        5
      ]
    },
    {
      "root": [
        2,
        4,
        5,
        null,
        null,
        null,
        1,
        null,
        3,
        6
      ]
    },
    {
      "root": [
        1,
        null,
        2,
        3
      ]
    },
    {
      "root": [
        1,
        2,
        3,
        4,
        5
      ]
    }
  ],
  "metaData": {
    "name": "inorderTraversal",
    "params": [
      {
        "name": "root",
        "type": "TreeNode"
      }
    ],
    "return": {
      "type": "number[]"
    }
  },
  "solutions": {
    "recursive": {
      "id": "recursive",
      "name": "Recursive",
      "programCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar inorderTraversal = function (root) {\r\n  const results = [];\r\n  const inorder = (node) => {\r\n    if (!node) return;\r\n\r\n    inorder(node.left);\r\n    results.push(node.val);\r\n    inorder(node.right);\r\n  };\r\n\r\n  inorder(root);\r\n  return results;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VTree } from 'visualizer';\r\nimport { red, green, amber, lightGreen, teal } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, treeNodes } = useVisualizerData();\r\n  const { root, results = [], node } = data;\r\n\r\n  return (\r\n    <>\r\n      <VArray value={results} />\r\n      <VTree\r\n        nodes={treeNodes}\r\n        getNode={(n, nodeLookup) => {\r\n          if (!n.references.has('node')) return;\r\n          if (expression === 'inorder(node.left)') {\r\n            const left = nodeLookup[n.children[0]];\r\n            if (left) {\r\n              left.color = green[400];\r\n            } else {\r\n              n.color = red[500];\r\n            }\r\n          }\r\n          if (expression === 'inorder(node.right)') {\r\n            const right = nodeLookup[n.children[1]];\r\n            if (right) {\r\n              right.color = green[400];\r\n            } else {\r\n              n.color = red[500];\r\n            }\r\n          }\r\n          return n;\r\n        }}\r\n        pointers={[\r\n          {\r\n            name: 'root',\r\n            value: root,\r\n            color: teal['500'],\r\n          },\r\n          {\r\n            name: 'node',\r\n            value: node,\r\n            color: amber['500'],\r\n            highlight: true,\r\n          },\r\n        ]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    },
    "iterative": {
      "id": "iterative",
      "name": "Iterative",
      "programCode": "/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val, left, right) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.left = (left===undefined ? null : left)\r\n *     this.right = (right===undefined ? null : right)\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {number[]}\r\n */\r\nvar inorderTraversal = function (root) {\r\n  const results = [];\r\n  const stack = [];\r\n  let node = root;\r\n\r\n  while (true) {\r\n    while (node) {\r\n      stack.push(node);\r\n      node = node.left;\r\n    }\r\n\r\n    if (stack.length === 0) {\r\n      return results;\r\n    }\r\n\r\n    const n = stack.pop();\r\n    results.push(n.val);\r\n    node = n.right;\r\n  }\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VStack, VTree, VC } from 'visualizer';\r\nimport { red, green, amber, lightGreen, teal } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, treeNodes, treeNodeCount } =\r\n    useVisualizerData();\r\n  const { root, results = [], stack = [], node } = data;\r\n  const padding = 30;\r\n\r\n  return (\r\n    <>\r\n      <VArray value={results.map((n) => n.val)} />\r\n      <VStack\r\n        y={VC.Array.ItemSize + padding}\r\n        value={stack.map((n) => n.val)}\r\n        length={treeNodeCount}\r\n      />\r\n      <VTree\r\n        y={VC.Array.ItemSize * 2 + padding * 3}\r\n        nodes={treeNodes}\r\n        pointers={[\r\n          {\r\n            name: 'root',\r\n            value: root,\r\n            color: teal['500'],\r\n          },\r\n          {\r\n            name: 'node',\r\n            value: node,\r\n            color: amber['500'],\r\n            highlight: true,\r\n          },\r\n        ]}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 73.7,
  "difficulty": "Easy",
  "title": "Binary Tree Inorder Traversal",
  "titleSlug": "binary-tree-inorder-traversal",
  "topicTags": [
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Tree",
      "slug": "tree"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Binary Tree",
      "slug": "binary-tree"
    }
  ]
}