{
  "id": "palindrome-linked-list",
  "neetcode": "https://www.youtube.com/watch?v=yOzXms1J6Nk",
  "testCases": [
    {
      "head": [
        1,
        2,
        2,
        1
      ]
    },
    {
      "head": [
        1,
        2
      ]
    }
  ],
  "metaData": {
    "name": "isPalindrome",
    "params": [
      {
        "name": "head",
        "type": "ListNode"
      }
    ],
    "return": {
      "type": "boolean"
    }
  },
  "solutions": {
    "array": {
      "id": "array",
      "name": "Array",
      "programCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val, next) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.next = (next===undefined ? null : next)\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function (head) {\r\n  const array = [];\r\n  let cur = head;\r\n\r\n  while (cur) {\r\n    array.push(cur.val);\r\n    cur = cur.next;\r\n  }\r\n\r\n  let left = 0;\r\n  let right = array.length - 1;\r\n\r\n  while (left < right) {\r\n    if (array[left] !== array[right]) {\r\n      return false;\r\n    }\r\n    left++;\r\n    right--;\r\n  }\r\n\r\n  return true;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VLinkedList, VArray } from 'visualizer';\r\nimport { red, amber, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, type, expression, listNodes } = useVisualizerData();\r\n  const { array = [], left, right, head, cur } = data;\r\n\r\n  return (\r\n    <>\r\n      <VLinkedList\r\n        nodes={listNodes}\r\n        pointers={[\r\n          { name: 'head', value: head, color: red[500] },\r\n          { name: 'cur', value: cur, color: lightGreen[500], highlight: true },\r\n        ]}\r\n      />\r\n      <VArray\r\n        x={90}\r\n        y={180}\r\n        value={array}\r\n        pointers={[\r\n          { name: 'left', value: left, color: red[500] },\r\n          { name: 'right', value: right, color: amber[500] },\r\n        ]}\r\n        getElementStyle={(_, index, style) => {\r\n          const test = type === 'testExpressionSuccess';\r\n\r\n          if (\r\n            expression === 'array[left] !== array[right]' &&\r\n            (index === left || index === right)\r\n          ) {\r\n            style.background = !test ? lightGreen[500] : red[500];\r\n            style.color = '#ffffff';\r\n          }\r\n\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    },
    "linkedList": {
      "id": "linkedList",
      "name": "Linked List",
      "programCode": "/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val, next) {\r\n *     this.val = (val===undefined ? 0 : val)\r\n *     this.next = (next===undefined ? null : next)\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function (head) {\r\n  let fastPointer = head;\r\n  let slowPointer = head;\r\n\r\n  while (fastPointer?.next) {\r\n    slowPointer = slowPointer.next;\r\n    fastPointer = fastPointer.next;\r\n    fastPointer = fastPointer?.next;\r\n  }\r\n\r\n  let reversedHead = _reverse(slowPointer);\r\n\r\n  let cur1 = head;\r\n  let cur2 = reversedHead;\r\n  while (cur2) {\r\n    if (cur1.val !== cur2.val) {\r\n      return false;\r\n    }\r\n\r\n    cur1 = cur1.next;\r\n    cur2 = cur2.next;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _reverse(head) {\r\n  let cur = head;\r\n  let left = null;\r\n\r\n  while (cur) {\r\n    let right = cur.next;\r\n    cur.next = left;\r\n    left = cur;\r\n    cur = right;\r\n  }\r\n\r\n  return left;\r\n}\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VLinkedList, VArray } from 'visualizer';\r\nimport { red, amber, blue, purple, lightGreen, green } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, type, expression, listNodes } = useVisualizerData();\r\n  const { reversedHead, head, cur1, cur2, slowPointer, fastPointer } = data;\r\n\r\n  return (\r\n    <VLinkedList\r\n      nodes={listNodes}\r\n      getNode={(node, nodeLookup) => {\r\n        const test = type === 'testExpressionSuccess';\r\n        if (expression === 'cur1.val !== cur2.val') {\r\n          const isHighlightedNodes =\r\n            node.references.has('cur1') || node.references.has('cur2');\r\n          if (isHighlightedNodes) {\r\n            node.color = test ? red[500] : green[500];\r\n          }\r\n        }\r\n        if (expression === 'fastPointer?.next') {\r\n          if (node.references.has('slow') && test) {\r\n            const nextNode = nodeLookup[node.next];\r\n            if (nextNode) {\r\n              nextNode.color = amber[500];\r\n            }\r\n          }\r\n          if (node.references.has('fast') && test) {\r\n            const nextNextNode = nodeLookup[nodeLookup[node.next]?.next];\r\n            if (nextNextNode) {\r\n              nextNextNode.color = lightGreen[500];\r\n            }\r\n          }\r\n        }\r\n        return node;\r\n      }}\r\n      pointers={[\r\n        { name: 'head', value: head, color: blue[500] },\r\n        { name: 'slow', value: slowPointer, color: amber[500] },\r\n        { name: 'fast', value: fastPointer, color: lightGreen[500] },\r\n        { name: 'cur1', value: cur1, color: red[300] },\r\n        { name: 'cur2', value: cur2, color: red[800] },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 50.2,
  "difficulty": "Easy",
  "title": "Palindrome Linked List",
  "titleSlug": "palindrome-linked-list",
  "topicTags": [
    {
      "name": "Linked List",
      "slug": "linked-list"
    },
    {
      "name": "Two Pointers",
      "slug": "two-pointers"
    },
    {
      "name": "Stack",
      "slug": "stack"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    }
  ]
}