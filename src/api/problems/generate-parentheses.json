{
  "id": "generate-parentheses",
  "neetcode": "https://www.youtube.com/watch?v=s9fokUqJ76A",
  "testCases": [
    {
      "n": 3
    },
    {
      "n": 4
    },
    {
      "n": 5
    }
  ],
  "metaData": {
    "name": "generateParenthesis",
    "params": [
      {
        "name": "n",
        "type": "number"
      }
    ],
    "return": {
      "type": "string[]"
    }
  },
  "solutions": {
    "backtracking": {
      "id": "backtracking",
      "name": "Backtracking",
      "programCode": "/**\r\n * @param {number} n\r\n * @return {string[]}\r\n */\r\nvar generateParenthesis = function (n) {\r\n  const stack = [];\r\n  const res = [];\r\n\r\n  const backtrack = (openN, closedN) => {\r\n    if (openN === closedN && closedN === n) {\r\n      res.push(stack.join(''));\r\n      return;\r\n    }\r\n\r\n    if (openN < n) {\r\n      stack.push('(');\r\n      backtrack(openN + 1, closedN);\r\n      stack.pop();\r\n    }\r\n    if (closedN < openN) {\r\n      stack.push(')');\r\n      backtrack(openN, closedN + 1);\r\n      stack.pop();\r\n    }\r\n  };\r\n\r\n  backtrack(0, 0);\r\n  return res;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VLookupTable, VC } from 'visualizer';\r\nimport { red, yellow, amber, purple, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, callStack } = useVisualizerData();\r\n  const {} = data;\r\n\r\n  return null;\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 72.4,
  "difficulty": "Medium",
  "title": "Generate Parentheses",
  "titleSlug": "generate-parentheses",
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ]
}