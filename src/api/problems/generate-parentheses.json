{
  "id": "generate-parentheses",
  "neetcode": "https://www.youtube.com/watch?v=s9fokUqJ76A",
  "testCases": [
    {
      "n": 3
    },
    {
      "n": 4
    },
    {
      "n": 2
    }
  ],
  "metaData": {
    "name": "generateParenthesis",
    "params": [
      {
        "name": "n",
        "type": "number"
      }
    ],
    "return": {
      "type": "string[]"
    }
  },
  "solutions": {
    "backtracking": {
      "id": "backtracking",
      "name": "Backtracking",
      "programCode": "/**\r\n * @param {number} n\r\n * @return {string[]}\r\n */\r\nvar generateParenthesis = function (n) {\r\n  const stack = [];\r\n  const res = [];\r\n\r\n  const backtrack = (openN, closedN) => {\r\n    if (openN === closedN && closedN === n) {\r\n      res.push(stack.join(''));\r\n      return;\r\n    }\r\n\r\n    if (openN < n) {\r\n      stack.push('(');\r\n      backtrack(openN + 1, closedN);\r\n      stack.pop();\r\n    }\r\n    if (closedN < openN) {\r\n      stack.push(')');\r\n      backtrack(openN, closedN + 1);\r\n      stack.pop();\r\n    }\r\n  };\r\n\r\n  backtrack(0, 0);\r\n  return res;\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport {\r\n  useVisualizerData,\r\n  useTestCase,\r\n  VStack,\r\n  VRecursiveTree,\r\n  VString,\r\n  VSet,\r\n  VC,\r\n} from 'visualizer';\r\nimport { red, yellow, blue, amber, purple, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, callStack } = useVisualizerData();\r\n  const { n } = useTestCase();\r\n  const { stack, res } = data;\r\n  const colorTransformer = {\r\n    '(': blue[500],\r\n    ')': yellow[600],\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <VStack value={stack} length={2 * n} />\r\n      <VRecursiveTree\r\n        trackedFn=\"backtrack\"\r\n        getNodeValue={(step) => step.watch.local.stack.join('')}\r\n        separationFactor={1.5}\r\n        renderNode={(n) => {\r\n          return (\r\n            <VString\r\n              value={n.val}\r\n              center\r\n              colorTransformer={colorTransformer}\r\n              getElementStyle={(value, i, style) => {\r\n                style.fontWeight = 600;\r\n                style.background = '#ffffff';\r\n                return style;\r\n              }}\r\n            />\r\n          );\r\n        }}\r\n      />\r\n      <VSet\r\n        y={VC.Array.ItemSize + 50}\r\n        renderItem={(value, [x, y]) => (\r\n          <VString\r\n            x={x}\r\n            y={y}\r\n            color={VC.Set.Color}\r\n            value={value}\r\n            colorTransformer={colorTransformer}\r\n          />\r\n        )}\r\n        label=\"res\"\r\n        value={res}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 72.4,
  "difficulty": "Medium",
  "title": "Generate Parentheses",
  "titleSlug": "generate-parentheses",
  "topicTags": [
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Backtracking",
      "slug": "backtracking"
    }
  ]
}