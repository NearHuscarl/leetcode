{
  "id": "repeated-dna-sequences",
  "neetcode": "https://www.youtube.com/watch?v=FzTYfsmtOso",
  "testCases": [
    {
      "s": "AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT"
    },
    {
      "s": "AAAAAAAAAAAAA"
    }
  ],
  "metaData": {
    "name": "findRepeatedDnaSequences",
    "params": [
      {
        "name": "s",
        "type": "string"
      }
    ],
    "return": {
      "type": "string[]"
    }
  },
  "solutions": {
    "set": {
      "id": "set",
      "name": "Set",
      "programCode": "/**\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar findRepeatedDnaSequences = function (s) {\r\n  const cachedSeqs = new Set();\r\n  const duplicatedSeqs = new Set();\r\n\r\n  for (let i = 0; i < s.length - 9; i++) {\r\n    const subStr = s.substring(i, i + 10);\r\n\r\n    if (cachedSeqs.has(subStr)) {\r\n      duplicatedSeqs.add(subStr);\r\n    }\r\n\r\n    cachedSeqs.add(subStr);\r\n  }\r\n\r\n  return [...duplicatedSeqs];\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VSet, VC } from 'visualizer';\r\nimport { red, green, amber, blue, purple, lightGreen } from 'colors';\r\n\r\nconst colorLookup = {\r\n  A: [red[500], red[100]],\r\n  T: [purple[500], purple[100]],\r\n  C: [lightGreen[500], lightGreen[100]],\r\n  G: [blue[500], blue[100]],\r\n};\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { cachedSeqs, duplicatedSeqs, s, i, subStr } = data;\r\n  const checkExpr = expression === 'cachedSeqs.has(subStr)';\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        value={s}\r\n        color=\"#00000000\"\r\n        highlightRange={[\r\n          i,\r\n          i + 9,\r\n          checkExpr ? (test ? lightGreen[500] : red[500]) : amber[700],\r\n        ]}\r\n        getElementStyle={(e, i, style) => {\r\n          style.borderColor = colorLookup[e][1];\r\n          style.background = colorLookup[e][1];\r\n          style.color = colorLookup[e][0];\r\n          return style;\r\n        }}\r\n      />\r\n      <VSet\r\n        x={0}\r\n        y={VC.Array.ItemSize + 70}\r\n        label=\"cachedSeqs\"\r\n        width={130}\r\n        value={cachedSeqs}\r\n        highlights={{\r\n          [subStr]: checkExpr && (test ? lightGreen[500] : red[500]),\r\n        }}\r\n      />\r\n      <VSet\r\n        x={VC.Array.ItemSize * 10 + 30}\r\n        y={VC.Array.ItemSize + 70}\r\n        label=\"duplicatedSeqs\"\r\n        width={130}\r\n        value={duplicatedSeqs}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "10n"
    }
  },
  "acRate": 46.9,
  "difficulty": "Medium",
  "title": "Repeated DNA Sequences",
  "titleSlug": "repeated-dna-sequences",
  "topicTags": [
    {
      "name": "Hash Table",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "slug": "string"
    },
    {
      "name": "Bit Manipulation",
      "slug": "bit-manipulation"
    },
    {
      "name": "Sliding Window",
      "slug": "sliding-window"
    },
    {
      "name": "Rolling Hash",
      "slug": "rolling-hash"
    },
    {
      "name": "Hash Function",
      "slug": "hash-function"
    }
  ]
}