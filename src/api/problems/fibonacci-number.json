{
  "id": "fibonacci-number",
  "testCases": [
    {
      "n": 4
    },
    {
      "n": 5
    },
    {
      "n": 6
    }
  ],
  "metaData": {
    "name": "fib",
    "params": [
      {
        "name": "n",
        "type": "number"
      }
    ],
    "return": {
      "type": "number"
    }
  },
  "solutions": {
    "dp": {
      "id": "dp",
      "name": "DP",
      "programCode": "/**\r\n * @param {number} n\r\n */\r\nfunction fib(n) {\r\n  return memoization(n);\r\n}\r\n/**\r\n * @param {number} n\r\n * @param {object} cache\r\n */\r\nconst memoization = (n, cache = {}) => {\r\n  if (n === 1 || n === 0) {\r\n    return n;\r\n  }\r\n  if (cache[n] !== undefined) {\r\n    return cache[n];\r\n  }\r\n  cache[n] = memoization(n - 1, cache) + memoization(n - 2, cache);\r\n  return cache[n];\r\n};\r\n",
      "visualizerCode": "import React from \"react\";\r\nimport { useVisualizerData, VRecursiveTree } from \"visualizer\";\r\nimport { amber } from \"colors\";\r\n\r\nexport const Visualizer = () => {\r\n  const { expression, type, data } = useVisualizerData();\r\n\r\n  return (\r\n    <VRecursiveTree\r\n      trackedFn=\"memoization\"\r\n      onVisitNode={(node, nodeData) => {\r\n        const test = type === \"testExpressionSuccess\";\r\n        const hitCache = expression === \"cache[n] !== undefined\" && test;\r\n        const isHighlightedNode = nodeData.tip || nodeData.data.n === data.n;\r\n\r\n        if (hitCache && isHighlightedNode) {\r\n          node.color = amber[500];\r\n          node.borderColor = amber[500];\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    },
    "recursive": {
      "id": "recursive",
      "name": "Recursive",
      "programCode": "/**\r\n * @param {number} n\r\n */\r\nfunction fib(n) {\r\n  if (n === 1 || n === 0) {\r\n    return n;\r\n  }\r\n  return fib(n - 1) + fib(n - 2);\r\n}\r\n",
      "visualizerCode": "import React from \"react\";\r\nimport { useVisualizerData, VRecursiveTree } from \"visualizer\";\r\nimport { red, lightGreen, teal, alpha, blue } from \"colors\";\r\n\r\nexport const Visualizer = () => {\r\n  return <VRecursiveTree trackedFn=\"fib\" />;\r\n};\r\n",
      "timeComplexity": "2^n"
    }
  },
  "acRate": 69.7,
  "difficulty": "Easy",
  "title": "Fibonacci Number",
  "titleSlug": "fibonacci-number",
  "topicTags": [
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Dynamic Programming",
      "slug": "dynamic-programming"
    },
    {
      "name": "Recursion",
      "slug": "recursion"
    },
    {
      "name": "Memoization",
      "slug": "memoization"
    }
  ]
}