{
  "id": "two-sum",
  "neetcode": "https://www.youtube.com/watch?v=KLlXCFG5TnA",
  "testCases": [
    {
      "nums": [
        2,
        1,
        6,
        5,
        3
      ],
      "target": 4
    },
    {
      "nums": [
        3,
        2,
        4
      ],
      "target": 6
    }
  ],
  "metaData": {
    "name": "twoSum",
    "params": [
      {
        "name": "nums",
        "type": "number[]"
      },
      {
        "name": "target",
        "type": "number"
      }
    ],
    "return": {
      "type": "number[]"
    }
  },
  "solutions": {
    "lookupTable": {
      "id": "lookupTable",
      "name": "Lookup Table",
      "programCode": "/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number[]}\r\n */\r\nvar twoSum = function (nums, target) {\r\n  const indexLookup = {};\r\n  for (let i = 0; i < nums.length; i++) {\r\n    const subtracted = target - nums[i];\r\n    if (indexLookup[subtracted] !== undefined) {\r\n      return [indexLookup[subtracted], i];\r\n    } else {\r\n      indexLookup[nums[i]] = i;\r\n    }\r\n  }\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VArray, VLookupTable, VC } from 'visualizer';\r\nimport { red, yellow, blue, lightGreen } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type } = useVisualizerData();\r\n  const { nums, i, indexLookup = {}, target } = data;\r\n  const label =\r\n    target !== undefined && nums[i] !== undefined\r\n      ? `${target} - ${nums[i]}`\r\n      : '';\r\n  const key = (target ?? 0) - (nums?.[i] ?? 0);\r\n  const keyFound = indexLookup[key] !== undefined;\r\n  const checkKeyExpr = expression === 'indexLookup[subtracted] !== undefined';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        y={30}\r\n        label=\"nums\"\r\n        value={nums}\r\n        pointers={[{ key: 'i', name: label, value: i, color: red[500] }]}\r\n        getElementStyle={(e, i2, style) => {\r\n          if (checkKeyExpr && i === i2 && keyFound) {\r\n            style.background = lightGreen[500];\r\n            style.color = '#ffffff';\r\n          }\r\n\r\n          return style;\r\n        }}\r\n      />\r\n      <VLookupTable\r\n        y={VC.Array.ItemSize + 100}\r\n        value={indexLookup}\r\n        header={['nums[i]', 'Index']}\r\n        keyWidth={70}\r\n        hideRatio\r\n        label={\r\n          checkKeyExpr\r\n            ? keyFound\r\n              ? `${key} found!`\r\n              : `${key} not found`\r\n            : undefined\r\n        }\r\n        getEntryStyle={(entry, style) => {\r\n          if (checkKeyExpr) {\r\n            if (keyFound && entry[0] == key) {\r\n              style.key.background = lightGreen[500];\r\n              style.key.color = '#ffffff';\r\n            }\r\n            if (!keyFound) {\r\n              style.key.background = red[500];\r\n              style.key.color = '#ffffff';\r\n            }\r\n          }\r\n\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 49.7,
  "difficulty": "Easy",
  "title": "Two Sum",
  "titleSlug": "two-sum",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Hash Table",
      "slug": "hash-table"
    }
  ]
}