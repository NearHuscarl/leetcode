{
  "id": "evaluate-reverse-polish-notation",
  "neetcode": "https://www.youtube.com/watch?v=ypn0aZ0nrL4",
  "testCases": [
    {
      "tokens": [
        "10",
        "6",
        "9",
        "3",
        "+",
        "-11",
        "*",
        "/",
        "*",
        "17",
        "+",
        "5",
        "+"
      ]
    },
    {
      "tokens": [
        "4",
        "13",
        "5",
        "/",
        "+"
      ]
    },
    {
      "tokens": [
        "2",
        "1",
        "+",
        "3",
        "*"
      ]
    }
  ],
  "metaData": {
    "name": "evalRPN",
    "params": [
      {
        "name": "tokens",
        "type": "string[]"
      }
    ],
    "return": {
      "type": "number"
    }
  },
  "solutions": {
    "stack": {
      "id": "stack",
      "name": "Stack",
      "programCode": "/**\r\n * @param {string[]} tokens\r\n * @return {number}\r\n */\r\nvar evalRPN = function (tokens) {\r\n  const stack = [];\r\n\r\n  for (let i = 0; i < tokens.length; i++) {\r\n    const token = tokens[i];\r\n\r\n    if (token === '+') {\r\n      stack.push(stack.pop() + stack.pop());\r\n    } else if (token === '-') {\r\n      const a = stack.pop(),\r\n        b = stack.pop();\r\n      stack.push(b - a);\r\n    } else if (token === '*') {\r\n      stack.push(stack.pop() * stack.pop());\r\n    } else if (token === '/') {\r\n      const a = stack.pop(),\r\n        b = stack.pop();\r\n      stack.push(Math.trunc(b / a));\r\n    } else {\r\n      stack.push(parseInt(token, 10));\r\n    }\r\n  }\r\n\r\n  return stack[0];\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VC, VArray, VStack } from 'visualizer';\r\nimport { red, amber, lightGreen, blue } from 'colors';\r\n\r\nexport const Visualizer = () => {\r\n  const { data, type, expression } = useVisualizerData();\r\n  const { stack, tokens = [], i } = data;\r\n  const operators = new Set(['+', '-', '*', '/']);\r\n  const test = type === 'testExpressionSuccess';\r\n\r\n  return (\r\n    <>\r\n      <VArray\r\n        value={tokens}\r\n        pointers={[{ name: 'i', value: i, color: red[500] }]}\r\n        getElementStyle={(e, i, style) => {\r\n          if (operators.has(e)) {\r\n            style.background = amber[100];\r\n          }\r\n\r\n          return style;\r\n        }}\r\n      />\r\n      <VStack\r\n        y={VC.Array.ItemSize + 40}\r\n        value={stack}\r\n        length={tokens.filter((t) => !operators.has(t + '')).length}\r\n        getElementStyle={(value, i, style) => {\r\n          if (\r\n            (expression === \"token === '+'\" ||\r\n              expression === \"token === '-'\" ||\r\n              expression === \"token === '*'\" ||\r\n              expression === \"token === '/'\") &&\r\n            test\r\n          ) {\r\n            if (i === stack.length - 1 || i === stack.length - 2) {\r\n              style.background =\r\n                i % 2 === 0 ? lightGreen[300] : lightGreen[500];\r\n              style.color = '#ffffff';\r\n            }\r\n          }\r\n\r\n          return style;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n"
    }
  },
  "acRate": 45.7,
  "difficulty": "Medium",
  "title": "Evaluate Reverse Polish Notation",
  "titleSlug": "evaluate-reverse-polish-notation",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Math",
      "slug": "math"
    },
    {
      "name": "Stack",
      "slug": "stack"
    }
  ]
}