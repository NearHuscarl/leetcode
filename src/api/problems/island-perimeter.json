{
  "id": "island-perimeter",
  "neetcode": "https://www.youtube.com/watch?v=fISIuAFRM2s",
  "testCases": [
    {
      "grid": [
        [
          0,
          1,
          0,
          0
        ],
        [
          1,
          1,
          1,
          0
        ],
        [
          0,
          1,
          0,
          0
        ],
        [
          1,
          1,
          0,
          0
        ]
      ]
    }
  ],
  "metaData": {
    "name": "islandPerimeter",
    "params": [
      {
        "name": "grid",
        "type": "number[][]"
      }
    ],
    "return": {
      "type": "number"
    }
  },
  "solutions": {
    "dfs": {
      "id": "dfs",
      "name": "Depth-First Search",
      "programCode": "/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar islandPerimeter = function (grid) {\r\n  const visit = new Set();\r\n  let perim = 0;\r\n\r\n  const dfs = (row, col) => {\r\n    if (\r\n      row >= grid.length ||\r\n      col >= grid[0].length ||\r\n      row < 0 ||\r\n      col < 0 ||\r\n      grid[row][col] === 0\r\n    ) {\r\n      perim++;\r\n      return;\r\n    }\r\n    const key = `${row},${col}`;\r\n    if (visit.has(key)) {\r\n      return;\r\n    }\r\n    visit.add(key);\r\n\r\n    dfs(row, col + 1);\r\n    dfs(row + 1, col);\r\n    dfs(row, col - 1);\r\n    dfs(row - 1, col);\r\n  };\r\n\r\n  for (let i = 0; i < grid.length; i++) {\r\n    for (let j = 0; j < grid[0].length; j++) {\r\n      if (grid[i][j]) {\r\n        return dfs(i, j);\r\n      }\r\n    }\r\n  }\r\n};\r\n",
      "visualizerCode": "import React from 'react';\r\nimport { useVisualizerData, VMatrix, VField, VSet, VC } from 'visualizer';\r\nimport {\r\n  red,\r\n  yellow,\r\n  amber,\r\n  purple,\r\n  lightGreen,\r\n  brown,\r\n  lightBlue,\r\n  transform,\r\n} from 'colors';\r\n\r\nconst interpolateColor = transform([1, 8], [purple[100], purple[900]]);\r\n\r\nexport const Visualizer = () => {\r\n  const { data, expression, type, callStack } = useVisualizerData();\r\n  const { grid, i, j, perim, visit } = data;\r\n  const visitSet = new Set(visit);\r\n\r\n  return (\r\n    <>\r\n      <VField\r\n        x={28}\r\n        y={70}\r\n        label=\"Perimeter\"\r\n        value={perim}\r\n        color={yellow[700]}\r\n      />\r\n      <VMatrix\r\n        y={80}\r\n        value={grid}\r\n        highlight={[1, yellow[500]]}\r\n        getElementStyle={(v, r, c, style) => {\r\n          style.background = v == 1 ? brown[200] : lightBlue[200];\r\n\r\n          if (visitSet.has(`${r},${c}`)) {\r\n            style.background = lightGreen[500];\r\n          }\r\n          if (r === i && c === j) {\r\n            style.background = amber[500];\r\n          }\r\n\r\n          callStack.forEach(({ params }, i) => {\r\n            const [cr, cc] = params;\r\n            if (cr == r && cc == c) {\r\n              style.background = interpolateColor(i);\r\n              if (i === callStack.length - 1) {\r\n                style.borderColor = purple[500];\r\n              }\r\n            }\r\n          });\r\n\r\n          return style;\r\n        }}\r\n      />\r\n      <VSet\r\n        x={VC.Array.ItemSize * (grid?.[0]?.length ?? 0) + 50}\r\n        y={80}\r\n        label=\"Cached Indices\"\r\n        value={visit}\r\n      />\r\n    </>\r\n  );\r\n};\r\n",
      "timeComplexity": "n * m"
    }
  },
  "acRate": 69.7,
  "difficulty": "Easy",
  "title": "Island Perimeter",
  "titleSlug": "island-perimeter",
  "topicTags": [
    {
      "name": "Array",
      "slug": "array"
    },
    {
      "name": "Depth-First Search",
      "slug": "depth-first-search"
    },
    {
      "name": "Breadth-First Search",
      "slug": "breadth-first-search"
    },
    {
      "name": "Matrix",
      "slug": "matrix"
    }
  ]
}